#!/usr/bin/env python3

# This utility will create a new EmpireAI user.
#
# Arguments:
#   --firstname
#   --lastname
#   --phone
#   --email
#   --username
#   --institution
#   --interactive
#
# This makes use of the EmpyreAI module and ultimately the Base Command API
#   to provide user management capabilities to coordinators without requiring
#   elevated privileges on the cluster.
#
# Return Codes:
#   0 = Success
#   1 = Unknown Error
#   100 = Missing argument
#   101 = User already exists in Base Command/LDAP
#   102 = Attempting to add a user to an invalid group
#
# Author: Kali McLennan (Flatiron Institute) - kmclennan@flatironinstitute.org

from EmPyreAI.EmpireUser import EmpireUser
from EmPyreAI.EmpireGroup import EmpireGroup
import EmPyreAI.EmpireUtils as EUtils
import os
import getpass
import sys
from prettytable import PrettyTable
import argparse as ap
import json
import subprocess
import jinja2
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import re
import yaml

def getInput(prompt, required=True, validAnswers=None):
    if required:
        while True:
            value = input(prompt).strip()
            if value:
                if validAnswers != None:
                    if value in validAnswers:
                        return value
                    else:
                        print("You must enter one of the following: ")
                        print(validAnswers)
                else:
                    return value
            else:
                print("An answer to this question is required.")
    else:
        value = input(prompt).strip()
        if value != None and len(value) == 0:
            return None
        return value

def formatPhone(value):
    digits = re.sub(r"[^\d]", "", value)

    if len(digits) == 10:
        return f"{digits[:3]}-{digits[3:6]}-{digits[6:]}"
    else:
        print(f"The supplied phone number of {value} cannot be parsed. This is non-fatal.")
        return value

def GatherData():
    data = {}
    # Prompt the user for all the required information
    data["firstname"] = getInput("Enter the users first name: ")
    data["lastname"] = getInput("Enter the users last name: ")
    data["email"] = getInput("Enter the users email address: ")
    data["phone"] = formatPhone(getInput("Enter the users phone number: "))
    data["institution"] = getInput("Enter the users institution: ", validAnswers=['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu'])
    data["username"] = getInput("Enter the desired username: ")
    data["pi"] = getInput("Enter the users PI if applicable: ", required=False)

    #if data["institution"] not in ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu']:
    #    print("[\033[31m ERROR\033[0m ] The specified institution is invalid. It must be one of ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu'].")
    #    sys.exit(100)

    return data

def ParseArgs():
    parser = ap.ArgumentParser()
    parser.add_argument("-u", "--username", type=str, help="The username.", action="store")
    parser.add_argument("-f", "--firstname", type=str, help="The users first name.", action="store")
    parser.add_argument("-l", "--lastname", type=str, help="The users last name.", action="store")
    parser.add_argument("-e", "--email", type=str, help="The users email address.", action="store")
    parser.add_argument("-p", "--phone", type=str, help="The users phone number.", action="store")
    parser.add_argument("-P", "--pi", type=str, help="The users PI, either by username or by Firstname Lastname", action="store")
    parser.add_argument("-i", "--institution", type=str, help="The users instituion", action="store")
    parser.add_argument("-I", "--interactive", help="Run interactively", action="store_true")
    parser.add_argument("-x", "--no-slurm", help="Skip adding the new user to Slurm.", action="store_true")
    parser.add_argument("-B", "--batch", help="Run in batch mode with the specified file as input.", action="store") #Implementation coming
    args = parser.parse_args()

    input_data = {}

    if args.interactive == True:
        input_data = GatherData()
    elif args.batch != None:
        if BatchMode(args.batch) == True:
            exit(0)
        else:
            print("Batch mode is exiting with an error code.")
            exit(1)        
    else:
        if args.username == None:
            print("[\033[31m ERROR\033[0m ] The username is a required flag. Please use [-u|--username] to provide this information.")
            sys.exit(100)
        else:
            input_data["username"] = args.username

        if args.firstname == None:
            print("[\033[31m ERROR\033[0m ] The users first name is a required flag. Please use [-f|--firstname] to provide this information.")
            sys.exit(100)
        else:
            input_data["firstname"] = args.firstname

        if args.lastname == None:
            print("[\033[31m ERROR\033[0m ] The users last name is a required flag. Please use [-l|--lastname] to provide this information.")
            sys.exit(100)
        else:
            input_data["lastname"] = args.lastname

        if args.email == None:
            print("[\033[31m ERROR\033[0m ] The users email address is a required flag. Please use [-e|--email] to provide this information.")
            sys.exit(100)
        else:
            input_data["email"] = args.email

        if args.phone == None:
            print("[\033[31m ERROR\033[0m ] The users phone number is a required flag. Please use [-p|--phone] to provide this information.")
            sys.exit(100)
        else:
            input_data["phone"] = args.phone

        if args.institution == None:
            print("[\033[31m ERROR\033[0m ] The users institution is a required flag. Please use [-i|--institution] to provide this information.")
            sys.exit(100)
        else:
            if args.institution not in ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu']:
                print("[\033[31m ERROR\033[0m ] The specified institution is invalid. It must be one of ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu'].")
                sys.exit(100)  
            input_data["institution"] = args.institution

        if args.pi != None: input_data["pi"] = args.pi
        else: input_data["pi"] = None

    return input_data

def SendWelcomeMail(firstname, username, institution, email):
    environment = jinja2.Environment(loader=jinja2.FileSystemLoader("/opt/EmpireAI-Tools/templates"))
    template = environment.get_template("new_user_email.template")
    content = template.render(firstname=firstname, username=username, institution=institution)
    smtp_server = "alpha-mgr"
    smtp_port = 25
    from_email = "help@empire-ai.org"
    to_email = email
    subject = "Empire AI Alpha Account Creation Notice"

    message = MIMEMultipart("alternative")
    message["From"] = from_email
    message["To"] = to_email
    message["Subject"] = subject
    mime_text = MIMEText(content, "html")
    message.attach(mime_text)
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.sendmail(from_email, to_email, message.as_string())
        print(f"[\033[32m SUCCESS\033[0m ] Sent a welcome email to {email}.")
    except Exception as e:
        print(f"[\033[31m ERROR\033[0m ] Failed to send a welcome email to {email}. Error details: {e}.")

def BatchMode(input_file, input_type="yaml"):
    # Process a YAML or JSON file which provides a list of information for one or more users
    #
    # Step 0: Verify that the input file exists
    if os.path.exists(input_file) == False:
        print(f"[\033[31m ERROR\033[0m ] The specified input file named {input_file} does not exist.")
        return 1
    
    # Step 1: Parse input file into the input_data variable as a list of associative arrays containing keyed user information
    input_data = None
    if input_type == "yaml":
        with open(input_file, 'r') as input_file:
            input_data = yaml.safe_load(input_file)
    elif input_type == "json":
        print("Batch processing of JSON user lists is not yet implemented.")
        return False
    
    if isinstance(input_data, list) == False:
        print(f"Failed to parse the contents of {input_file} as a {input_type} data structure contianing user information.")
        return False
    
    # The following steps all take place inside a loop of entries in input_data
    for entry in input_data:
        try:
            # Step 2: Check if the required fields are populated for this row
            if "institution" in entry.keys():
                if entry["institution"] not in ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu']:
                    print(f"The specified institution of {entry['institution']} is not one of ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu']. Skipping this entry.")
                    continue
            else:
                print(f"The institution key is not set in the input data for username {entry['username']}. Skipping this entry.")
                continue
            if "firstname" not in entry.keys():
                print(f"The firstname key is not set in the input data for username {entry['username']}. Skipping this entry.")
                continue
            if "lastname" not in entry.keys():
                print(f"The firstname key is not set in the input data for username {entry['username']}. Skipping this entry.")
                continue
            if "phone" not in entry.keys():
                print(f"The phone key is not set in the input data for username {entry['username']}. Skipping this entry.")
                continue
            if "pi" in entry.keys() and "is_pi" in entry.keys() and entry["is_pi"] == True:
                print(f"The entry for username {entry['username']} contains both 'pi' and 'is_pi' keys. This is not a valid combo.")

            # Step 3: Check if the specified username already exists
            if EmpireUser.Exists(entry["username"]):
                print(f"The specified username of {entry['username']} already exists in Alpha LDAP. Skipping.")
                continue

            # Step 4: Create a stub user
            if EmpireUser.New(entry['username']) == False:
                print(f"Failed to create a stub user using EmpireUser.New for {entry['username']}!")

            # Step 5: Load the stub user to modify
            new_user = EmpireUser(entry['username'])
            user_data = {}
            user_data["commonName"] = entry["firstname"]
            user_data["surname"] = entry["lastname"]
            user_data["email"] = entry["email"]
            note_dict = new_user.notes
            note_dict["phone"] = entry["phone"]
            if "pi" in entry.keys():
                note_dict["pi"] = entry["pi"]
            elif "is_pi" in entry.keys() and entry["is_pi"] == True:
                note_dict["is_pi"] = True
            if "project" in entry.keys():
                note_dict["project"] = entry["project"]
            user_data["notes"] = json.dumps(note_dict)
            user_data["password"] = EUtils.GenPassword(28)
            new_user.SetUserData(user_data)
            new_user.AddToGroup(entry["institution"], force=True)
            SendWelcomeMail(new_user.firstname, new_user.username, entry["institution"], new_user.email)
            print(f"Created a new user named {new_user.username}.")
        except Exception as e:
            print(f"An exception occurred while creating a new user named {entry['username']}. Attempting to continue.")
            print(e)
            continue

    return True

if __name__ == "__main__":
    if not (EUtils.CheckAPI()):
        print("At least one API access key or certificate file is not present. You will not be able to interact with the Base Command API without these files.")
        sys.exit(1)

    new_user_data = ParseArgs()

    targetGroup = EmpireGroup(new_user_data["institution"])
    if targetGroup.CanChange(getpass.getuser()) == False:
        print(f"[\033[31m ERROR\033[0m ] You are only allowed to add users for your institution.")
        sys.exit(102)

    if not EmpireUser.Exists(new_user_data["username"]):
        newUser = EmpireUser(new_user_data["username"], load=False)
        #EmpireUser.New(new_user_data["username"])
        #try:
            # Create the new user, then fetch the user object for modification
            #EmpireUser.New(new_user_data["username"])
        #except Exception as e:
        #    print(f"[\033[31m ERROR\033[0m ] Failed to create a new User object named " + new_user_data["username"] + " via the Base Command API.")
        #    print(e)
        #    sys.exit(1)
        
        newUser = EmpireUser(new_user_data["username"])

        #Construct a dict of values to set for the new user
        data = {}
        data["username"] = new_user_data["username"]
        data["commonName"] = new_user_data["firstname"]
        data["surname"] = new_user_data["lastname"]
        data["email"] = new_user_data["email"]
        note_dict = {}
        note_dict["phone"] = new_user_data["phone"]
        if new_user_data["pi"] != None:
            note_dict["pi"] = new_user_data["pi"]
        data["notes"] = json.dumps(note_dict)
        data["password"] = EUtils.GenPassword(28)
        newUser.Add(data)

        print("[\033[32m SUCCESS\033[0m ] Created a new user with the following information:\n")
        table = PrettyTable()
        table.field_names = ["Username", "First Name", "Last Name", "Email", "Phone", "Institution"]
        table.add_row([newUser.username, newUser.firstname, newUser.lastname, newUser.email, newUser.phone, new_user_data["institution"]])
        print(table)
        print("\n[\033[33m NOTICE\033[0m ] The users account will be added to Slurm during the next cron cycle.")

        newUser.AddToGroup(new_user_data["institution"], force=True)
        SendWelcomeMail(newUser.firstname, newUser.username, new_user_data["institution"], newUser.email)

        sys.exit(0)

    else:
        print(f"[\033[31m ERROR\033[0m ] The user " + new_user_data["username"] + " already exists in LDAP.")
        sys.exit(101)
        
    # We have exited in some weird condition if we reach this code, set the exit code on the way out
    sys.exit(1)

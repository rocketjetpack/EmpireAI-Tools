#!/usr/bin/env python3

# This utility will create a new EmpireAI user.
#
# Arguments:
#   --firstname
#   --lastname
#   --phone
#   --email
#   --username
#   --institution
#
# This makes use of the EmpyreAI module and ultimately the Base Command API
#   to provide user management capabilities to coordinators without requiring
#   elevated privileges on the cluster.
#
# Return Codes:
#   0 = Success
#   1 = Unknown Error
#   100 = Missing argument
#   101 = Failed to set the password
#   102 = User does not exist
#
# Author: Kali McLennan (Flatiron Institute) - kmclennan@flatironinstitute.org

from EmPyreAI.EmpireUser import EmpireUser
import EmPyreAI.EmpireUtils as EUtils
import os
import getpass
import sys
from prettytable import PrettyTable
import argparse as ap
import json
import subprocess

def ParseArgs():
    parser = ap.ArgumentParser()
    parser.add_argument("-u", "--username", type=str, help="The username.", action="store")
    parser.add_argument("-l", "--length", type=int, help="How long of a password to generate (default is 14 characters).", action="store")
    args = parser.parse_args()

    if args.username == None:
        print("The username is a required flag. Please use [-u|--username] to provide this information.")
        sys.exit(100)

    if int(args.length) < 10:
        print("[\033[93m WARNING\033[0m ] Generated passwords may not be less than 10 characters in length. Increasing minimum length to 10.")
        args.length = 10

    if args.length == None:
        args.length = 15

    return args

if __name__ == "__main__":
    if not (EUtils.CheckAPI()):
        print("At least one API access key or certificate file is not present. You will not be able to interact with the Base Command API without these files.")
        sys.exit(1)

    args = ParseArgs()
    
    eUser = EmpireUser(args.username)    

    if eUser.user_data == None:
        print(f"[\033[31m ERROR\033[0m ] The user {args.username} is unknown.")
        sys.exit(102)

    newPassword = eUser.RandomizePassword(args.length)

    if newPassword != None:
        print("[\033[32m SUCCESS\033[0m ] New password information:\n")
        table = PrettyTable()
        table.field_names = ["Username", "Password"]
        table.add_row([eUser.username, newPassword])
        print(table)
        sys.exit(0)
    else:
        print(f"[\033[31m ERROR\033[0m ] Failed to randomize the password for {eUser.username}.")
        sys.exit(101)
        
    # We have exited in some weird condition if we reach this code, set the exit code on the way out
    sys.exit(1)

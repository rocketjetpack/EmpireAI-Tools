#!/usr/bin/env python3

# This script processes users in Nvidia Base Command's user list to ensure that
# each user has all necessary directories created as well as a presence in the
# Slurm accounting database.
#
# Arguments: None
#
# This makes use of the EmpyreAI module and ultimately the Base Command API
#   to provide user management capabilities to coordinators without requiring
#   elevated privileges on the cluster.
#
# Return Codes: None
#
# Author: Kali McLennan (Flatiron Institute) - kmclennan@flatironinstitute.org


from EmPyreAI.EmpireUser import EmpireUser
from EmPyreAI.EmpireGroup import EmpireGroup
from EmPyreAI.EmpireSlurm import EmpireSlurm
import EmPyreAI.EmpireUtils as EUtils
import os
import getpass
import sys
from prettytable import PrettyTable
import json
import paramiko
import subprocess
import shlex
import time

created_dirs = []

def CreateSlurmEntry(username, institution):
    try:
        environ = os.environ.copy()
        environ["SLURM_CONF"] = "/cm/shared/apps/slurm/var/etc/slurm/slurm.conf"
        cmd = f"/cm/shared/apps/slurm/current/bin/sacctmgr -i create user name={username} cluster=slurm account={institution} qos=normal,{institution}"
        result = subprocess.run(shlex.split(cmd), capture_output=True, text=True)
        if result.returncode == 0:
            table = PrettyTable()
            table.field_names = ["Username", "Account"]
            table.add_row([username, institution])
            print(table)
    except Exception as e:
        print(f"Exception occurred while creating a Slurm user for {username} in the {institution} account.")
        print(e)

def HandleLustreDirectory(username, institution):
    try:
        hostname = "alpha1"
        sshuser = "root"
        key = "/root/.ssh/id_ecdsa"
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname, username=sshuser, key_filename=key)
        directory = f"/mnt/lustre/{institution}/{username}"
        print(f"Checking {directory}")

        command = f"if [ -d '{directory}' ]; then echo 'exists'; else echo 'create'; fi"
        stdin, stdout, stderr = ssh.exec_command(command)
        result = stdout.read().decode().strip()

        if result == "create":
            mkdirCmd = f"mkdir {directory}"
            chownCmd = f"chown {username}:{username} {directory}"
            ssh.exec_command(mkdirCmd)
            ssh.exec_command(chownCmd)
        ssh.close()
        table = PrettyTable()
        table.field_names = ["Username", "Lustre Dir"]
        table.add_row([username, directory])
        #print(table)
        return True
    except Exception as e:
        print(f"Exception occurred while verifying/creating /mnt/lustre/{institution}/{username} on alpha1.")
        print(e)
        return False


if __name__ == "__main__":
    verbose = True
    slurmAPI = EmpireSlurm()
    slurmAllUsers = slurmAPI.GetAllUsers()

    for institution in ['cuny', 'suny', 'columbia', 'cornell', 'rpi', 'nyu']:
        thisGroup = EmpireGroup(institution)
        for groupMember in thisGroup.members:
            thisUser = EmpireUser(groupMember)
            userNotes = thisUser.Notes
            
            if "Lustre" not in userNotes.keys() or userNotes["Lustre"] != "Created":
                print(f"Need to check Lustre directory for {thisUser.Username}...")
                if HandleLustreDirectory(thisUser.Username, institution) == True:
                    # Record that we have already handled this user and skip them in subsequent runs
                    thisUser.SetNote("Lustre", "Created")
                    thisUser.Commit()

            
            userAccounts = slurmAPI.GetUserAccounts(thisUser.Username)
            if userAccounts == None:
                CreateSlurmEntry(thisUser.Username, institution)
            else:
                #print(f"Checking if {institution} is in [{thisUser.Groups}] and not in [{userAccounts['accounts']}]")
                if institution in thisUser.Groups and institution not in userAccounts["accounts"]:                
                    print(f"User {thisUser.Username} does not have an entry in account {institution} in Slurm. Need to create them.")
                    CreateSlurmEntry(thisUser.Username, institution)

#!/usr/bin/env python3

# This utility will rotate which partition in Slurm has the highest priority based upon the previously set
# priority partition.
#
# This makes use of the "PriorityTier" of the partition where a job submitted to a higher priority tier
# partition will preempt jobs that are executing in a lower PriorityTier partition.
#
# Arguments: None
#
# Return Codes:
#   0 = Success
#   1 = Unknown Error
#   100 = Missing argument
#   101 = User already exists in Base Command/LDAP
#
# Author: Kali McLennan (Flatiron Institute) - kmclennan@flatironinstitute.org

import os
import sys
from prettytable import PrettyTable
import subprocess
import shlex
import re
from datetime import datetime

# CUNY, NYU, RPI, and SUNY are acronyms, which explains why cuny preceeds columbia in this list
order = ['cuny', 'columbia', 'cornell', 'nyu', 'rpi', 'suny']
current_prio_partition = None
next_prio_partition = None

def GetPartitionText():
    environ = os.environ.copy()
    environ["SLURM_CONF"] = "/cm/shared/apps/slurm/var/etc/slurm/slurm.conf"
    cmd = f"/cm/shared/apps/slurm/current/bin/scontrol show partition"
    result =  subprocess.run(shlex.split(cmd), capture_output=True, text=True)
    if result.returncode == 0:
        return result.stdout
    else:
        return None

def ParsePartition(details):
    try:
        lines = details.strip().split("\n")
        data = {}
        for line in lines:
            items = re.findall(r"(\S+)=([\S,]+)", line)
            for key,value in items:
                data[key] = value
        return data
    except:
        return None

def SetPartitionPriorityTier(partition_name, value):
    # construct the command
    environ = os.environ.copy()
    environ["SLURM_CONF"] = "/cm/shared/apps/slurm/var/etc/slurm/slurm.conf"
    cmd = f"/cm/shared/apps/slurm/current/bin/scontrol update PartitionName={partition_name} PriorityTier={value}"
    result = subprocess.run(shlex.split(cmd), capture_output=True, text=True)
    if result.returncode == 0:
        return True
    else:
        return False
    
if __name__ == "__main__":
    print("Weekly partition priority rotation has been initiated at " + datetime.now().strftime("%Y-%m-%d %H:%M:%S" + "."))

    # Get the text output from scontrol show part
    scontrol_show_part_text = GetPartitionText()
    if scontrol_show_part_text == None:
        print("An unrecoverable error occurred attempting to fetch the output of 'scontrol show partition'")
        sys.exit(1)

    # Do some dumb regex matching to parse the output into a big dictionary
    partition_pattern = re.compile(r"PartitionName=(\S+)(.*?)\n(?=\n|PartitionName=)", re.DOTALL)
    partitions = {}
    for match in partition_pattern.finditer(scontrol_show_part_text):
        partition_name = match.group(1)
        partition_details = match.group(2)
        partitions[partition_name] = ParsePartition(partition_details)
        if partitions[partition_name] == None:
            print("An unrecoverable error occurred attempting to parse data for a partition.")
            sys.exit(1)

    # Loop through the dictionary based upon partition name and fetch the prioritytier field
    for partition_name, details in partitions.items():
        priority_tier = details.get("PriorityTier", "N/A")
        # If the currently evaluated partition name has a priority tier of 100 that is the partition that currently has priority
        if priority_tier == "100":
            print(f"The currently prioritized partition is: {partition_name}.")
            current_prio_partition = partition_name
            # Determine the following partition to assign priority to and be sure to wrap at the end of the list such that cuny follows suny
            next_index = (order.index(partition_name) + 1) % len(order)
            next_prio_partition = order[next_index]
            print(f"The next partition to have priority should be: {next_prio_partition}.")
    
    # Reduce the currently prioritized partition to a PriorityTier of 10
    if SetPartitionPriorityTier(current_prio_partition, 10) == False:
        print(f"An unrecoverable error occurred setting the PriorityTier of {current_prio_partition} to 10!")
        sys.exit(1)
    
    # Reduce the next prioritized partition to a PriorityTier of 100
    if SetPartitionPriorityTier(next_prio_partition, 100) == False:
        print(f"An unrecoverable error occurred setting the PriorityTier of {next_prio_partition} to 100!")
        sys.exit(1)

    # Refresh our data for a printout
    scontrol_show_part_text = GetPartitionText()
    if scontrol_show_part_text == None:
        print("An unrecoverable error occurred attempting to refresh the output of 'scontrol show partition' but priorities have already been modified. This error can probably be ignored.")
        sys.exit(2)

    partitions = {}
    for match in partition_pattern.finditer(scontrol_show_part_text):
        partition_name = match.group(1)
        partition_details = match.group(2)
        partitions[partition_name] = ParsePartition(partition_details)
        if partitions[partition_name] == None:
            print("An unrecoverable error occurred attempting to parse the data for a partition. Priorities have already been modified. This error can probably be ignored.")
            sys.exit(2)

    table = PrettyTable()
    table.field_names = ['Partition Name', 'PriorityTier']
    for partition_name, details in partitions.items():
        table.add_row([partition_name, details.get("PriorityTier", "N/A")])
    print(table)    

    print("Weekly partition priority rotation has been completed at " + datetime.now().strftime("%Y-%m-%d %H:%M:%S" + "."))
    sys.exit(0)